buildscript {
    ext {
        projectVersion = '0.1.0'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
        classpath "gradle.plugin.gradle-plugins:jartest:1.0.1"
    }
}

apply plugin: 'java'

repositories {
    mavenCentral()
}

group = 'eu.fraho.libs'
version = "${projectVersion}"
description = "GUI components to enhance swing"

jar {
    version = "${project.version}"
    manifest {
        attributes("Implementation-Title": "Gradle",
                "Implementation-Version": version)
    }
}
buildscript {
    ext {
        slf4jVersion = '[1.7.12,2.0['
        lombokVersion = '[1.16,2.0['
        jetbrainsAnnotationsVersion = '[15.0,16.0['
        logbackVersion = '[1.1.3,2.0['
        junitVersion = '[4.12,5.0['
        assertJVersion = '[3.8,4.0['
    }
    repositories {
        mavenCentral()
    }
}
dependencies {
    compile("org.slf4j:slf4j-api:${slf4jVersion}")
    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("org.jetbrains:annotations:${jetbrainsAnnotationsVersion}")

    testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
    testCompile("junit:junit:${junitVersion}")
    testCompile("org.assertj:assertj-swing-junit:${assertJVersion}")
}

// release stuff
apply plugin: 'maven'
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// code coverage
apply plugin: 'jacoco'
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

test {
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}

if (project.hasProperty('release')) {
    apply plugin: 'io.codearte.nexus-staging'
    apply plugin: 'signing'

    // Signature of artifacts
    signing {
        sign configurations.archives
    }

    // OSSRH publication
    uploadArchives {
        repositories {
            mavenDeployer {
                // POM signature
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                // Target repository
                if (project.version.endsWith('-SNAPSHOT')) {
                    repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                } else {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                }
                pom.project {
                    name project.archivesBaseName
                    description project.description
                    url 'https://github.com/bratkartoffel/security-jwt'

                    scm {
                        connection 'scm:git:https://github.com/bratkartoffel/security-jwt.git'
                        developerConnection 'scm:git:git@github.com:bratkartoffel/security-jwt.git'
                        url 'https://github.com/bratkartoffel/security-jwt.git'
                    }

                    licenses {
                        license {
                            name 'The MIT License (MIT)'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'bratkartoffel'
                            name = 'Simon Frankenberger'
                            email = 'simon-ossrh-release@fraho.eu'
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        username = ossrhUsername
        password = ossrhPassword
    }
}
